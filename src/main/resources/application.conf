akka {
  loglevel = info

  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    warn-about-java-serializer-usage = on

    # cap default-dispatcher to constraint resources of all actors
    #default-dispatcher {
    #  fork-join-executor {
    #    # max num of threads
    #    parallelism-max = 2
    #  }
    #}

    serializers {
      proto = "akka.remote.serialization.ProtobufSerializer"
    }

    serialization-bindings {
      "com.javaigua.interconnFlights.actors.messages.GetInterconnections" = proto
      "com.javaigua.interconnFlights.actors.messages.FetchRoutesAndSchedule" = proto
      "com.javaigua.interconnFlights.actors.messages.RoutesAndSchedules" = proto
      "com.javaigua.interconnFlights.actors.messages.CalculateInterconnFlights" = proto
      "com.javaigua.interconnFlights.domain.Route" = proto
      "com.javaigua.interconnFlights.domain.Flight" = proto
      "com.javaigua.interconnFlights.domain.DaySchedule" = proto
      "com.javaigua.interconnFlights.domain.MonthSchedule" = proto
      "com.javaigua.interconnFlights.domain.InterconnFlight" = proto
      "com.javaigua.interconnFlights.domain.InterconnFlights" = proto
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${clustering.ip}
      port = ${clustering.port}
    }
  }

  cluster {
    log-info = on
    seed-nodes = [
      "akka.tcp://"${application.name}"@"${clustering.ip}":2551"
    ]

    # auto-down-unreachable-after = 10s
    sharding.state-store-mode = ddata
    run-coordinated-shutdown-when-down = off
  }

  extensions = ["akka.cluster.ddata.DistributedData"]

  http: {
    # cap host-connection-pool to constraint (but puting a higher top!) of http client resources (bulkhead pattern)
    host-connection-pool: {
      max-connections = 32
      max-open-requests = 128
    }
    parsing: {
      illegal-header-warnings = off
    }
  }
}

application {
  name = interconnFlightsColl
  exposed-port = 8080
  timeout-millis = 30000

  routes-url = "https://api.ryanair.com/core/3/routes"
  schedules-url = "https://api.ryanair.com/timetable/3/schedules/%s/%s/years/%s/months/%s"
}

clustering {
  ip = "127.0.0.1"
  port = 2551
}